{"version":3,"sources":["raw-js/kendo.maskedtextbox.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Maskedtextbox","Core","Floatinglabel","Icons","PrefixSuffixContainersChunk","this","kendo_core_js","kendo_floatinglabel_js","kendo_icons_js","kendo_prefixSuffixContainers_chunk_js","$","undefined$1","window","min","Math","caret","keys","ui","Widget","NS","isPlainObject","setTimeout","STATEDISABLED","STATEINVALID","FOCUSED","DISABLED","READONLY","CHANGE","MOUSEUP","DROP","KEYDOWN","PASTE","ns","name","INPUT_EVENT_NAME","support","propertyChangeEvent","MaskedTextBox","extend","init","element","options","DOMElement","that","fn","call","_rules","rules","_wrapper","_tokenize","_form","addClass","attr","on","value","_togglePrompt","_old","_emptyMask","_oldValue","wrapper","_timeoutId","_maskLength","val","clearTimeout","removeClass","_change","mask","length","is","parents","enable","readonly","_validationIcon","icon","iconClass","insertAfter","_label","_applyCssClasses","a","widget","suffixInsertAfter","floatingLabel","refresh","notify","clearPromptChar","unmaskOnPost","promptChar","culture","label","size","fillMode","rounded","prefixOptions","separator","suffixOptions","events","L","C","A","setOptions","_unbindInput","_bindInput","destroy","off","_formElement","_resetHandler","_submitHandler","raw","_unmask","replace","RegExp","escapeRegExp","emptyMask","_mask","_unmaskedValue","_activeElement","show","_editable","disable","_keydown","bind","_drop","_trackChange","_inputHandler","browser","msie","version","join","_legacyIEInputHandler","toggleClass","prop","trigger","__changing","inputChange","backward","old","cursor","lengthDiff","mobile","mobileOS","__dropping","android","contentStart","str1","str2","i","stringDiffStart","content","substring","caretPos","endContent","_trimStartPromptChars","unmasked","_findCaretPosBackwards","count","indexOf","pos","caretStart","_find","__backward","e","input","type","__pasting","formId","form","closest","key","keyCode","BACKSPACE","ENTER","idx","step","charAt","tokens","start","end","valueLength","chr","current","empty","chrIdx","split","token","tokenIdx","tokensLength","result","test","isFunction","_blinkInvalidState","floating","labelText","id","_floatingLabelContainer","wrap","parent","FloatingLabel","guid","_inputLabel","style","cssText","width","className","_addInvalidState","_invalidStateTimeout","_removeInvalidState","rule","maskChars","numberFormat","getCulture","currency","symbol","l","text","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.maskedtextbox.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.floatinglabel.js'), require('kendo.icons.js'), require('kendo.prefix-suffix-containers.chunk.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.floatinglabel', 'kendo.icons', 'kendo.prefix-suffix-containers.chunk'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Maskedtextbox = {}), global.kendo._globals.Core, global.kendo._globals.Floatinglabel, global.kendo._globals.Icons, global.kendo._globals.PrefixSuffixContainersChunk));\n})(this, (function (exports, kendo_core_js, kendo_floatinglabel_js, kendo_icons_js, kendo_prefixSuffixContainers_chunk_js) {\n    const __meta__ = {\n        id: \"maskedtextbox\",\n        name: \"MaskedTextBox\",\n        category: \"web\",\n        description: \"The MaskedTextBox widget allows to specify a mask type on an input field.\",\n        depends: [\"core\", \"floatinglabel\", \"icons\", \"prefix-suffix-containers.chunk\"]\n    };\n\n    (function($, undefined$1) {\n        var global = window;\n        var min = global.Math.min;\n        var kendo = global.kendo;\n        var caret = kendo.caret;\n        var keys = kendo.keys;\n        var ui = kendo.ui;\n        var Widget = ui.Widget;\n        var NS = \".kendoMaskedTextBox\";\n        var isPlainObject = $.isPlainObject;\n        var setTimeout = window.setTimeout;\n\n        var LABELCLASSES = \"k-label k-input-label\";\n        var FLOATINGLABELCLASS = \"k-floating-label\";\n        var STATEDISABLED = \"k-disabled\";\n        var STATEINVALID = \"k-invalid\";\n        var FOCUSED = \"k-focus\";\n        var DISABLED = \"disabled\";\n        var READONLY = \"readonly\";\n        var CHANGE = \"change\";\n        var MOUSEUP = \"mouseup\";\n        var DROP = \"drop\";\n        var KEYDOWN = \"keydown\";\n        var PASTE = \"paste\";\n        var INPUT = \"input\";\n\n        function ns(name) { return name + NS; }\n\n        var INPUT_EVENT_NAME = ns(kendo.support.propertyChangeEvent ? \"propertychange\" : INPUT);\n\n        function stringDiffStart(str1, str2) {\n            var i = 0;\n            while (i < str2.length) {\n                if (str1[i] !== str2[i]) {\n                    break;\n                }\n                i++;\n            }\n\n            return i;\n        }\n        var MaskedTextBox = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n                var DOMElement;\n\n                Widget.fn.init.call(that, element, options);\n\n                that._rules = $.extend({}, that.rules, that.options.rules);\n\n                element = that.element;\n                DOMElement = element[0];\n\n                that._wrapper();\n                that._tokenize();\n                that._form();\n\n                that.element\n                    .addClass(\"k-input-inner\")\n                    .attr(\"autocomplete\", \"off\")\n                    .on(\"focus\" + NS, function() {\n                        var value = DOMElement.value;\n\n                        if (!value) {\n                            DOMElement.value = that._old = that._emptyMask;\n                        } else {\n                            that._togglePrompt(true);\n                        }\n\n                        that._oldValue = value;\n                        that.wrapper.addClass(FOCUSED);\n\n                        that._timeoutId = setTimeout(function() {\n                            caret(element, 0, value ? that._maskLength : 0);\n                        });\n                    })\n                    .on(\"focusout\" + NS, function() {\n                        var value = element.val();\n\n                        clearTimeout(that._timeoutId);\n                        DOMElement.value = that._old = \"\";\n\n                        if (value !== that._emptyMask) {\n                            DOMElement.value = that._old = value;\n                        }\n\n                        that.wrapper.removeClass(FOCUSED);\n                        that._change();\n                        that._togglePrompt();\n                    });\n\n                if (that.options.mask && that.options.mask.length > 0) {\n                    that.element.attr(\"aria-placeholder\", that.options.mask);\n                }\n\n                var disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                } else {\n                    that.readonly(element.is(\"[readonly]\"));\n                }\n\n                that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n\n                that.value(that.options.value || element.val());\n\n                that._label();\n                that._applyCssClasses();\n\n                kendo_prefixSuffixContainers_chunk_js.a({ widget: that, wrapper: that.wrapper, options: that.options, suffixInsertAfter: that._validationIcon });\n                if (that.floatingLabel) {\n                    that.floatingLabel.refresh();\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"MaskedTextBox\",\n                clearPromptChar: false,\n                unmaskOnPost: false,\n                promptChar: \"_\",\n                culture: \"\",\n                rules: {},\n                value: \"\",\n                mask: \"\",\n                label: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                }\n            },\n\n            events: [\n                CHANGE\n            ],\n\n            rules: {\n                \"0\": /\\d/,\n                \"9\": /\\d|\\s/,\n                \"#\": /\\d|\\s|\\+|\\-/,\n                \"L\": /[a-zA-Z]/,\n                \"?\": /[a-zA-Z]|\\s/,\n                \"&\": /\\S/,\n                \"C\": /./,\n                \"A\": /[a-zA-Z0-9]/,\n                \"a\": /[a-zA-Z0-9]|\\s/\n            },\n\n            setOptions: function(options) {\n                var that = this;\n\n                Widget.fn.setOptions.call(that, options);\n\n                that._rules = $.extend({}, that.rules, that.options.rules);\n\n                that._tokenize();\n\n                this._unbindInput();\n                this._bindInput();\n\n                that.value(that.element.val());\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.destroy();\n                }\n\n                that.element.off(NS);\n\n                if (that._formElement) {\n                    that._formElement.off(\"reset\", that._resetHandler);\n                    that._formElement.off(\"submit\", that._submitHandler);\n                }\n\n                Widget.fn.destroy.call(that);\n            },\n\n            raw: function() {\n                var unmasked = this._unmask(this.element.val(), 0);\n                return unmasked.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \"\");\n            },\n\n            value: function(value) {\n                var element = this.element;\n                var emptyMask = this._emptyMask;\n\n                if (value === undefined$1) {\n                    return this.element.val();\n                }\n\n                if (value === null) {\n                    value = \"\";\n                }\n\n                if (!emptyMask) {\n                    this._oldValue = value;\n                    element.val(value);\n                    return;\n                }\n\n                value = this._unmask(value + \"\");\n\n                element.val(value ? emptyMask : \"\");\n\n                this._mask(0, this._maskLength, value);\n                this._unmaskedValue = null;\n\n                value = element.val();\n                this._oldValue = value;\n\n                if (kendo._activeElement() !== element) {\n                    if (value === emptyMask) {\n                        element.val(\"\");\n                    } else {\n                        this._togglePrompt();\n                    }\n                }\n\n                if (this.floatingLabel) {\n                    this.floatingLabel.refresh();\n                }\n            },\n\n            _togglePrompt: function(show) {\n                var DOMElement = this.element[0];\n                var value = DOMElement.value;\n\n                if (this.options.clearPromptChar) {\n                    if (!show) {\n                        value = value.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \" \");\n                    } else {\n                        value = this._oldValue;\n                    }\n\n                    DOMElement.value = this._old = value;\n                }\n            },\n\n            readonly: function(readonly) {\n                var that = this;\n\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n                }\n            },\n\n            enable: function(enable) {\n                var that = this;\n\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n                }\n            },\n\n            _bindInput: function() {\n                var that = this;\n\n                if (that._maskLength) {\n                    that.element\n                        .on(ns(KEYDOWN), that._keydown.bind(that))\n                        .on(ns(DROP), that._drop.bind(that))\n                        .on(ns(CHANGE), that._trackChange.bind(that))\n                        .on(INPUT_EVENT_NAME, that._inputHandler.bind(that));\n\n\n                    if (kendo.support.browser.msie) {\n                        var version = kendo.support.browser.version;\n                        if (version > 8 && version < 11) {\n                            var events = [ns(MOUSEUP), ns(DROP), ns(KEYDOWN), ns(PASTE)].join(\" \");\n                            that.element.on(events, that._legacyIEInputHandler.bind(that));\n                        }\n                    }\n                }\n            },\n\n            _unbindInput: function() {\n                var events = [INPUT_EVENT_NAME, ns(KEYDOWN), ns(MOUSEUP), ns(DROP), ns(PASTE)].join(\" \");\n\n                this.element.off(events);\n            },\n\n            _editable: function(options) {\n                var that = this;\n                var element = that.element;\n                var wrapper = that.wrapper;\n                var disable = options.disable;\n                var readonly = options.readonly;\n\n                that._unbindInput();\n\n                if (!readonly && !disable) {\n                    element.prop(DISABLED, false)\n                           .prop(READONLY, false);\n\n                    wrapper.removeClass(STATEDISABLED);\n\n                    that._bindInput();\n                } else {\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly);\n\n                    wrapper.toggleClass(STATEDISABLED, disable);\n                }\n            },\n\n            _change: function() {\n                var that = this;\n                var value = that.value();\n\n                if (value !== that._oldValue) {\n                    that._oldValue = value;\n\n                    that.trigger(CHANGE);\n                    that.element.trigger(CHANGE);\n                }\n                else if (value === \"\" && that.__changing) {//ensure change is raised when empty value (mask is stripped from input content) for consistent ngjs model update\n                    that.element.trigger(CHANGE);\n                }\n            },\n\n            inputChange: function(backward) {\n                var that = this;\n                var old = that._old;\n                var element = that.element[0];\n                var value = element.value;\n                var selection = caret(element);\n                var cursor = selection[1];\n                var lengthDiff = value.length - old.length;\n                var mobile = kendo.support.mobileOS;\n\n                if (that.__dropping && lengthDiff < 0) {//dropping in same input on WebKit is raised once for the removal phase and once for the adding phase\n                    return;\n                }\n\n                if (lengthDiff === -1 && mobile.android && mobile.browser === \"chrome\") {\n                    backward = true;\n                }\n\n                var contentStart = min(cursor, stringDiffStart(value, old));\n                var content = value.substring(contentStart, cursor);\n\n                element.value = value.substring(0, contentStart) + that._emptyMask.substring(contentStart);\n\n                var caretPos = that._mask(contentStart, cursor, content);\n                var endContent = that._trimStartPromptChars(value.substring(cursor), min(lengthDiff, caretPos - contentStart));\n\n                var unmasked = that._unmask(endContent, old.length - endContent.length);\n                that._mask(caretPos, caretPos, unmasked);\n\n                if (backward) {\n                    caretPos = that._findCaretPosBackwards(contentStart);\n                }\n\n                caret(element, caretPos);\n\n                //clean-up flags\n                that.__dropping = false;\n            },\n\n            _trimStartPromptChars: function(content, count) {\n                var promptChar = this.options.promptChar;\n\n                while (count-- > 0 && content.indexOf(promptChar) === 0) {\n                    content = content.substring(1);\n                }\n\n                return content;\n            },\n\n            _findCaretPosBackwards: function(pos) {\n                var caretStart = this._find(pos, true);\n                if (caretStart < pos) {\n                    caretStart += 1;\n                }\n\n                return caretStart;\n            },\n\n            _inputHandler: function() {\n                if (kendo._activeElement() !== this.element[0]) {\n                    return;\n                }\n\n                this.inputChange(this.__backward);\n            },\n\n            _legacyIEInputHandler: function(e) {\n                var that = this;\n                var input = that.element[0];\n                var value = input.value;\n                var type = e.type;\n\n                that.__pasting = (type === \"paste\");\n\n                setTimeout(function() {\n                    if (type === \"mouseup\" && that.__pasting) {\n                        return;\n                    }\n                    if (input.value && input.value !== value) {\n                        that.inputChange(that.__backward);\n                    }\n                });\n            },\n\n            _trackChange: function() {\n                var that = this;\n\n                that.__changing = true;\n                setTimeout(function() { that.__changing = false; });\n            },\n\n            _form: function() {\n                var that = this;\n                var element = that.element;\n                var formId = element.attr(\"form\");\n                var form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        setTimeout(function() {\n                            that.value(element[0].value);\n                        });\n                    };\n\n                    that._submitHandler = function() {\n                        that.element[0].value = that._old = that.raw();\n                    };\n\n                    if (that.options.unmaskOnPost) {\n                        form.on(\"submit\", that._submitHandler);\n                    }\n\n                    that._formElement = form.on(\"reset\", that._resetHandler);\n                }\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n\n                this.__backward = key === keys.BACKSPACE;\n\n                if (key === keys.ENTER) {\n                    this._change();\n                }\n            },\n\n            _drop: function() {\n                this.__dropping = true;\n            },\n\n            _find: function(idx, backward) {\n                var value = this.element.val() || this._emptyMask;\n                var step = 1;\n\n                if (backward === true) {\n                    step = -1;\n                }\n\n                while (idx > -1 || idx <= this._maskLength) {\n                    if (value.charAt(idx) !== this.tokens[idx]) {\n                        return idx;\n                    }\n\n                    idx += step;\n                }\n\n                return -1;\n            },\n\n            _mask: function(start, end, value, backward) {\n                var element = this.element[0];\n                var current = element.value || this._emptyMask;\n                var empty = this.options.promptChar;\n                var valueLength;\n                var chrIdx = 0;\n                var unmasked;\n                var chr;\n                var idx;\n\n                start = this._find(start, backward);\n\n                if (start > end) {\n                    end = start;\n                }\n\n                unmasked = this._unmask(current.substring(end), end);\n                value = this._unmask(value, start);\n                valueLength = value.length;\n\n                if (value) {\n                    unmasked = unmasked.replace(new RegExp(\"^_{0,\" + valueLength + \"}\"), \"\");\n                }\n\n                value += unmasked;\n                current = current.split(\"\");\n                chr = value.charAt(chrIdx);\n\n                while (start < this._maskLength) {\n                    current[start] = chr || empty;\n                    chr = value.charAt(++chrIdx);\n\n                    if (idx === undefined$1 && chrIdx > valueLength) {\n                        idx = start;\n                    }\n\n                    start = this._find(start + 1);\n                }\n\n                element.value = this._old = current.join(\"\");\n\n                if (kendo._activeElement() === element) {\n                    if (idx === undefined$1) {\n                        idx = this._maskLength;\n                    }\n\n                    caret(element, idx);\n                }\n\n                return idx;\n            },\n\n            _unmask: function(value, idx) {\n                if (!value) {\n                    return \"\";\n                }\n\n                if (this._unmaskedValue === value) {\n                    return this._unmaskedValue;\n                }\n                value = (value + \"\").split(\"\");\n\n                var chr;\n                var token;\n                var chrIdx = 0;\n                var tokenIdx = idx || 0;\n\n                var empty = this.options.promptChar;\n\n                var valueLength = value.length;\n                var tokensLength = this.tokens.length;\n\n                var result = \"\";\n\n                while (tokenIdx < tokensLength) {\n                    chr = value[chrIdx];\n                    token = this.tokens[tokenIdx];\n\n                    if (chr === token || chr === empty) {\n                        result += chr === empty ? empty : \"\";\n\n                        chrIdx += 1;\n                        tokenIdx += 1;\n                    } else if (typeof token !== \"string\") {\n                        if ((token && token.test && token.test(chr)) || (kendo.isFunction(token) && token(chr))) {\n                            result += chr;\n                            tokenIdx += 1;\n                        } else {\n                            if (valueLength === 1) {\n                                this._blinkInvalidState();\n                            }\n                        }\n\n                        chrIdx += 1;\n                    } else {\n                        tokenIdx += 1;\n                    }\n\n                    if (chrIdx >= valueLength) {\n                        break;\n                    }\n                }\n                this._unmaskedValue = result;\n                return result;\n            },\n\n            _label: function() {\n                var that = this;\n                var element = that.element;\n                var options = that.options;\n                var id = element.attr(\"id\");\n                var floating;\n                var labelText;\n\n                if (options.label !== null) {\n                    floating = isPlainObject(options.label) ? options.label.floating : false;\n                    labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n                    if (floating) {\n                        that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                        that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n                    }\n\n                    if (kendo.isFunction(labelText)) {\n                        labelText = labelText.call(that);\n                    }\n\n                    if (!labelText) {\n                        labelText = \"\";\n                    }\n\n                    if (!id) {\n                        id = options.name + \"_\" + kendo.guid();\n                        element.attr(\"id\", id);\n                    }\n\n                    that._inputLabel = $(\"<label class='\" + (floating ? FLOATINGLABELCLASS : LABELCLASSES) + \"' for='\" + id + \"'>\" + labelText + \"</label>'\")[floating ? \"insertAfter\" : \"insertBefore\"](that.wrapper);\n                }\n            },\n\n            _wrapper: function() {\n                var that = this;\n                var element = that.element;\n                var DOMElement = element[0];\n\n                var wrapper = element.wrap(\"<span class='k-input k-maskedtextbox'></span>\").parent();\n                wrapper[0].style.cssText = DOMElement.style.cssText;\n                DOMElement.style.width = \"100%\";\n                that.wrapper = wrapper.addClass(DOMElement.className).removeClass('input-validation-error');\n            },\n\n            _blinkInvalidState: function() {\n                var that = this;\n\n                that._addInvalidState();\n                clearTimeout(that._invalidStateTimeout);\n                that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n            },\n\n            _addInvalidState: function() {\n                var that = this;\n\n                that.wrapper.addClass(STATEINVALID);\n                that._validationIcon.removeClass(\"k-hidden\");\n            },\n\n            _removeInvalidState: function() {\n                var that = this;\n\n                that.wrapper.removeClass(STATEINVALID);\n                that._validationIcon.addClass(\"k-hidden\");\n                that._invalidStateTimeout = null;\n            },\n\n            _tokenize: function() {\n                var tokens = [];\n                var tokenIdx = 0;\n\n                var mask = this.options.mask || \"\";\n                var maskChars = mask.split(\"\");\n                var length = maskChars.length;\n                var idx = 0;\n                var chr;\n                var rule;\n\n                var emptyMask = \"\";\n                var promptChar = this.options.promptChar;\n                var numberFormat = kendo.getCulture(this.options.culture).numberFormat;\n                var rules = this._rules;\n\n                while (idx < length) {\n                    chr = maskChars[idx];\n                    rule = rules[chr];\n\n                    if (rule) {\n                        tokens[tokenIdx] = rule;\n                        emptyMask += promptChar;\n                        tokenIdx += 1;\n                    } else {\n                        if (chr === \".\" || chr === \",\") {\n                            chr = numberFormat[chr];\n                        } else if (chr === \"$\") {\n                            chr = numberFormat.currency.symbol;\n                        } else if (chr === \"\\\\\") {\n                            idx += 1;\n                            chr = maskChars[idx];\n                        }\n\n                        chr = chr.split(\"\");\n\n                        for (var i = 0, l = chr.length; i < l; i++) {\n                            tokens[tokenIdx] = chr[i];\n                            emptyMask += chr[i];\n                            tokenIdx += 1;\n                        }\n                    }\n                    idx++;\n                }\n\n                this.tokens = tokens;\n\n                this._emptyMask = emptyMask;\n                this._maskLength = emptyMask.length;\n            }\n        });\n\n        function escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        }\n\n        kendo.cssProperties.registerPrefix(\"MaskedTextBox\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"MaskedTextBox\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(MaskedTextBox);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}