{"version":3,"sources":["raw-js/kendo.autocomplete.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Autocomplete","List","MobileScroller","Virtuallist","PrefixSuffixContainersChunk","this","kendo_list_js","kendo_mobile_scroller_js","kendo_virtuallist_js","kendo_prefixSuffixContainers_chunk_js","$","undefined$1","window","encode","htmlEncode","support","caret","activeElement","_activeElement","placeholderSupported","placeholder","ui","keys","DataSource","data","ARIA_DISABLED","ARIA_READONLY","CHANGE","DISABLED","READONLY","FOCUSED","STATEDISABLED","ns","HOVEREVENTS","indexOfWordAtCaret","caretIdx","text","separator","substring","split","length","AutoComplete","extend","init","element","options","wrapper","that","Array","isArray","dataSource","fn","call","attr","_wrapper","_clearButton","_dataSource","_ignoreCase","type","_popup","addClass","on","_keydown","bind","_keypress","_search","_prev","_accessor","_oldText","_placeholder","ev","filterInput","relatedTarget","_change","close","removeClass","autocomplete","role","_clear","_clearValue","_clearValueMouseDownHandler","_enable","_old","_initList","parents","is","enable","listView","e","preventDefault","_resetFocusItemHandler","_resetFocusItem","a","widget","prefixInsertBefore","_inputValuesContainer","suffixInsertAfter","clearButton","notify","_toggleCloseVisibility","_applyCssClasses","label","_label","_aria","name","enabled","suggest","template","groupTemplate","fixedGroupTemplate","prefixOptions","suffixOptions","dataTextField","minLength","enforceMinLength","delay","height","filter","ignoreCase","highlightFirst","animation","virtual","value","autoWidth","popup","size","fillMode","rounded","currentTarget","classList","contains","_clearValueTrigger","_onActionSheetCreate","val","trigger","_onCloseButtonPressed","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_errorHandler","_hideBusy","create","setDataSource","events","setOptions","listOptions","_listOptions","_accessors","skipUpdateOnBind","dataValueField","selectedItemChange","_editable","off","readonly","disable","_toggleHover","prop","current","focus","_deactivateItem","destroy","refresh","select","li","_select","search","word","lowerCaseValue","_separator","accentFoldingFiltering","clearTimeout","_typingTimeout","wordAtCaret","_open","_mute","toLocaleLowerCase","toLowerCase","_filterSource","operator","field","one","_unifySeparators","idx","key","_last","currentValue","words","wordIndex","selectionEnd","BACKSPACE","DELETE","view","inArray","ul","_text","indexOf","lastIndexOf","_defaultSeparator","toString","push","lastSeparator","matchAll","source","pop","slice","join","_refreshFloatingLabel","_click","item","dataItem","dataItemByIndex","getElementIndex","_active","done","_blur","_clearText","noop","_highlightFirst","index","scrollTo","_listBound","action","flatView","groupsLength","_group","isActive","_renderFooter","_renderNoData","_toggleNoData","_toggleHeader","_resizePopup","position","_inputValue","_allowOpening","unbind","_touchScroller","reset","callback","_muted","_listChange","_selectValue","selectedDataItems","defaultSeparator","splice","replaceWordAtCaret","_preselect","oldText","setValue","unifyType","valueUpdated","_typing","itemSelected","clearValueTrigger","typing","className","keyCode","visible","DOWN","_move","open","ESC","altKey","UP","HOME","END","ENTER","TAB","PAGEDOWN","PAGEUP","_hovered","direction","scrollWith","screenHeight","_view","show","toggleClass","document","RegExp","setTimeout","candidate","insertAfter","preventShow","_showClear","_hideClear","DOMelement","parent","wrap","style","cssText","css","width","_focused","plugin","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","jQuery","kendo$1","__meta__","id","category","description","depends","features","default","Object","defineProperty"],"mappings":"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","file":"kendo.autocomplete.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.list.js'), require('kendo.mobile.scroller.js'), require('kendo.virtuallist.js'), require('kendo.prefix-suffix-containers.chunk.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.list', 'kendo.mobile.scroller', 'kendo.virtuallist', 'kendo.prefix-suffix-containers.chunk'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Autocomplete = {}), global.kendo._globals.List, global.kendo._globals.MobileScroller, global.kendo._globals.Virtuallist, global.kendo._globals.PrefixSuffixContainersChunk));\n})(this, (function (exports, kendo_list_js, kendo_mobile_scroller_js, kendo_virtuallist_js, kendo_prefixSuffixContainers_chunk_js) {\n    const __meta__ = {\n        id: \"autocomplete\",\n        name: \"AutoComplete\",\n        category: \"web\",\n        description: \"The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.\",\n        depends: [\"list\", \"prefix-suffix-containers.chunk\"],\n        features: [ {\n            id: \"mobile-scroller\",\n            name: \"Mobile scroller\",\n            description: \"Support for kinetic scrolling in mobile device\",\n            depends: [ \"mobile.scroller\" ]\n        }, {\n            id: \"virtualization\",\n            name: \"VirtualList\",\n            description: \"Support for virtualization\",\n            depends: [ \"virtuallist\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            encode = kendo.htmlEncode,\n            support = kendo.support,\n            caret = kendo.caret,\n            activeElement = kendo._activeElement,\n            placeholderSupported = support.placeholder,\n            ui = kendo.ui,\n            List = ui.List,\n            keys = kendo.keys,\n            DataSource = kendo.data.DataSource,\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            CHANGE = \"change\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            FOCUSED = \"k-focus\",\n            SELECTED = \"k-selected\",\n            STATEDISABLED = \"k-disabled\",\n            AUTOCOMPLETEVALUE = \"off\",\n            HOVER = \"k-hover\",\n            ns = \".kendoAutoComplete\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns;\n\n        function indexOfWordAtCaret(caretIdx, text, separator) {\n            return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;\n        }\n\n        function wordAtCaret(caretIdx, text, separator) {\n            return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];\n        }\n\n        function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {\n            var words = text.split(separator);\n\n            words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);\n\n            if (separator && words[words.length - 1] !== \"\") {\n                words.push(\"\");\n            }\n\n            return words.join(defaultSeparator);\n        }\n\n        var AutoComplete = List.extend({\n            init: function(element, options) {\n                var that = this, wrapper, disabled;\n\n                that.ns = ns;\n                options = Array.isArray(options) ? { dataSource: options } : options;\n\n                List.fn.init.call(that, element, options);\n\n                element = that.element;\n                options = that.options;\n\n                options.placeholder = options.placeholder || element.attr(\"placeholder\");\n                if (placeholderSupported) {\n                    element.attr(\"placeholder\", options.placeholder);\n                }\n\n                that._wrapper();\n                that._clearButton();\n\n                that._dataSource();\n                that._ignoreCase();\n\n                element[0].type = \"text\";\n                wrapper = that.wrapper;\n\n                that._popup();\n\n                element\n                    .addClass(\"k-input-inner\")\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"keypress\" + ns, that._keypress.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .on(\"focus\" + ns, function() {\n                        that._prev = that._accessor();\n                        that._oldText = that._prev;\n                        that._placeholder(false);\n                        wrapper.addClass(FOCUSED);\n                    })\n                    .on(\"focusout\" + ns, function(ev) {\n                        if (that.filterInput && ev.relatedTarget === that.filterInput[0]) {\n                            return;\n                        }\n\n                        that._change();\n                        that._placeholder();\n                        that.close();\n                        wrapper.removeClass(FOCUSED);\n                    })\n                    .attr({\n                        autocomplete: AUTOCOMPLETEVALUE,\n                        role: \"combobox\",\n                        \"aria-expanded\": false\n                    });\n\n                that._clear.on(\"click\" + ns + \" touchend\" + ns, that._clearValue.bind(that));\n                that._clear.on(\"mousedown\" + ns, that._clearValueMouseDownHandler.bind(that));\n                that._enable();\n\n                that._old = that._accessor();\n\n                that._placeholder();\n\n                that._initList();\n\n                disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                }\n\n                that.listView.bind(\"click\", function(e) { e.preventDefault(); });\n\n                that._resetFocusItemHandler = that._resetFocusItem.bind(that);\n                kendo_prefixSuffixContainers_chunk_js.a({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element });\n\n                kendo.notify(that);\n                that._toggleCloseVisibility();\n                that._applyCssClasses();\n\n                if (options.label) {\n                    that._label();\n                }\n\n                that._aria();\n            },\n\n            options: {\n                name: \"AutoComplete\",\n                enabled: true,\n                suggest: false,\n                template: \"\",\n                groupTemplate: (data) => encode(data),\n                fixedGroupTemplate: (data) => encode(data),\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                },\n                dataTextField: \"\",\n                minLength: 1,\n                enforceMinLength: false,\n                delay: 200,\n                height: 200,\n                filter: \"startswith\",\n                ignoreCase: true,\n                highlightFirst: false,\n                separator: null,\n                placeholder: \"\",\n                animation: {},\n                virtual: false,\n                value: null,\n                clearButton: true,\n                autoWidth: false,\n                popup: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null,\n            },\n\n            _clearValueMouseDownHandler: function(ev) {\n                var that = this;\n\n                if (ev && ev.currentTarget && ev.currentTarget.classList.contains('k-clear-value')) {\n                    that._clearValueTrigger = true;\n                } else {\n                    that._clearValueTrigger = false;\n                }\n            },\n\n            _onActionSheetCreate: function() {\n                var that = this;\n\n                if (that.filterInput) {\n                    that.filterInput\n                        .on(\"keydown\" + ns, that._keydown.bind(that))\n                        .on(\"keypress\" + ns, that._keypress.bind(that))\n                        .on(\"input\" + ns, that._search.bind(that))\n                        .on(\"paste\" + ns, that._search.bind(that))\n                        .attr({\n                            autocomplete: AUTOCOMPLETEVALUE,\n                            role: \"combobox\",\n                            \"aria-expanded\": false\n                        });\n\n                    that.popup.bind(\"activate\", () => {\n                        that.filterInput.val(that.element.val());\n                        that.filterInput.trigger(\"focus\");\n                    });\n\n                    that.popup.bind(\"deactivate\", () => {\n                        that.element.trigger(\"focus\");\n                    });\n                }\n            },\n\n            _onCloseButtonPressed: function() {\n                var that = this;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n            },\n\n            _popup: function() {\n                List.fn._popup.call(this);\n                this.popup.element.addClass(\"k-autocomplete-popup\");\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that._unbindDataSource();\n                } else {\n                    that._progressHandler = that._showBusy;\n                    that._errorHandler = that._hideBusy;\n                }\n\n                that.dataSource = DataSource.create(that.options.dataSource)\n                    .bind(\"progress\", that._progressHandler)\n                    .bind(\"error\", that._errorHandler);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n                this._dataSource();\n\n                this.listView.setDataSource(this.dataSource);\n            },\n\n            events: [\n                \"open\",\n                \"close\",\n                CHANGE,\n                \"select\",\n                \"filtering\",\n                \"dataBinding\",\n                \"dataBound\"\n            ],\n\n            setOptions: function(options) {\n                var listOptions = this._listOptions(options);\n\n                List.fn.setOptions.call(this, options);\n\n                this.listView.setOptions(listOptions);\n                this._accessors();\n                this._aria();\n                this._clearButton();\n            },\n\n            _listOptions: function(options) {\n                var listOptions = List.fn._listOptions.call(this, $.extend(options, {\n                    skipUpdateOnBind: true\n                }));\n\n                listOptions.dataValueField = listOptions.dataTextField;\n                listOptions.selectedItemChange = null;\n\n                return listOptions;\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    element = that.element,\n                    wrapper = that.wrapper.off(ns),\n                    readonly = options.readonly,\n                    disable = options.disable;\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    element.prop(DISABLED, false)\n                           .prop(READONLY, false)\n                           .attr(ARIA_DISABLED, false)\n                           .attr(ARIA_READONLY, false);\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n\n                that._toggleCloseVisibility();\n            },\n\n            close: function() {\n                var that = this;\n                var current = that.listView.focus();\n\n                if (current) {\n                    current.removeClass(SELECTED);\n                }\n\n                that.popup.close();\n                that._deactivateItem();\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(ns);\n                that._clear.off(ns);\n                that.wrapper.off(ns);\n\n                if (that.filterInput) {\n                    that.filterInput.off(ns);\n                }\n\n                List.fn.destroy.call(that);\n            },\n\n            refresh: function() {\n                this.listView.refresh();\n            },\n\n            select: function(li) {\n                this._select(li);\n            },\n\n            search: function(word) {\n                let that = this,\n                options = that.options,\n                ignoreCase = options.ignoreCase,\n                separator = that._separator(),\n                length,\n                lowerCaseValue,\n                accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering,\n                element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.element;\n\n                word = word || that._accessor();\n\n                clearTimeout(that._typingTimeout);\n\n                if (separator) {\n                    word = wordAtCaret(caret(element)[0], word, separator);\n                }\n\n                length = word.length;\n\n                if ((!options.enforceMinLength && !length) || length >= options.minLength) {\n                    that._open = true;\n\n                    that._mute(function() {\n                        this.listView.value([]);\n                    });\n\n                    lowerCaseValue = accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase();\n\n                    that._filterSource({\n                        value: ignoreCase ? lowerCaseValue : word,\n                        operator: options.filter,\n                        field: options.dataTextField,\n                        ignoreCase: ignoreCase\n                    });\n\n                    that.one(\"close\", that._unifySeparators.bind(that));\n                }\n                that._toggleCloseVisibility();\n            },\n\n            suggest: function(word) {\n                var that = this,\n                    key = that._last,\n                    value = that._accessor(),\n                    currentValue = that.value(),\n                    element = that.element[0],\n                    caretIdx = caret(element)[0],\n                    separator = that._separator(),\n                    words = value.split(separator),\n                    wordIndex = indexOfWordAtCaret(caretIdx, value, separator),\n                    selectionEnd = caretIdx,\n                    idx,\n                    accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n                if (key == keys.BACKSPACE || key == keys.DELETE) {\n                    that._last = undefined$1;\n                    return;\n                }\n\n                word = word || \"\";\n\n                if (typeof word !== \"string\") {\n                    if (word[0]) {\n                        word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n                    }\n\n                    word = word ? that._text(word) : \"\";\n                }\n\n                if (caretIdx <= 0) {\n                    caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n                }\n\n                idx = value.substring(0, caretIdx).lastIndexOf(that._defaultSeparator());\n                idx = idx > -1 ? caretIdx - (idx + that._defaultSeparator().length) : caretIdx;\n                value = words[wordIndex].substring(0, idx);\n\n                if (word) {\n                    word = word.toString();\n                    idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n                    if (idx > -1) {\n                        word = word.substring(idx + value.length);\n\n                        selectionEnd = caretIdx + word.length;\n\n                        value += word;\n                    }\n\n                    if (separator && words[words.length - 1] !== \"\") {\n                        words.push(\"\");\n                    }\n\n                }\n\n                words[wordIndex] = value;\n\n                if (typeof that.options.separator == 'object' && that.options.separator != null) {\n                    if (currentValue.length > 1) {\n                        let lastSeparator = [...currentValue.matchAll(separator.source)].pop();\n                        if (lastSeparator) {\n                            that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\") + lastSeparator + words[words.length - 1]);\n                        } else {\n                            that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\"));\n                        }\n                    } else {\n                      that._accessor(words.join(this._defaultSeparator() || \"\"));\n                    }\n                } else {\n                    that._accessor(words.join(separator || \"\"));\n                }\n\n                if (element === activeElement()) {\n                    caret(element, caretIdx, selectionEnd);\n                }\n            },\n\n            value: function(value) {\n                if (value !== undefined$1) {\n                    this.listView.value(value);\n\n                    this._accessor(value);\n                    this._old = this._accessor();\n                    this._oldText = this._accessor();\n                } else {\n                    return this._accessor();\n                }\n                this._toggleCloseVisibility();\n                this._refreshFloatingLabel();\n            },\n\n            _click: function(e) {\n                var item = e.item;\n                var that = this;\n                var element = that.element;\n                var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n\n                e.preventDefault();\n\n                that._active = true;\n\n                if (that.trigger(\"select\", { dataItem: dataItem, item: item })) {\n                    that.close();\n                    return;\n                }\n                that._oldText = element.val();\n                that._select(item).done(function() {\n                    that._blur();\n\n                    caret(element, element.val().length);\n                });\n            },\n\n            _clearText: $.noop,\n\n            _highlightFirst: function() {\n                var index = this.options.highlightFirst ? 0 : -1;\n\n                this.listView.focus(index);\n            },\n\n            _resetFocusItem: function() {\n                if (this.options.virtual) {\n                    this.listView.scrollTo(0);\n                }\n\n                this._highlightFirst();\n            },\n\n            _listBound: function() {\n                var that = this;\n                var popup = that.popup;\n                var options = that.options;\n                var data = that.dataSource.flatView();\n                var length = data.length;\n                var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n                var isActive = that.element[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();\n                var action;\n\n                that._renderFooter();\n                that._renderNoData();\n                that._toggleNoData(!length);\n                that._toggleHeader(!!groupsLength && !!length);\n\n                that._resizePopup();\n\n                popup.position();\n\n                if (length) {\n                    if (options.suggest && isActive && that._inputValue()) {\n                        that.suggest(data[0]);\n                    }\n\n                    that._highlightFirst();\n                }\n\n                if (that._open) {\n                    that._open = false;\n                    action = that._allowOpening() ? \"open\" : \"close\";\n\n                    if (that._typingTimeout && !isActive) {\n                        action = \"close\";\n                    }\n\n                    if (length) {\n                        that._resetFocusItem();\n\n                        if (options.virtual) {\n                            that.popup\n                                .unbind(\"activate\", that._resetFocusItemHandler)\n                                .one(\"activate\", that._resetFocusItemHandler);\n                        }\n                    }\n\n                    popup[action]();\n                    that._typingTimeout = undefined$1;\n                }\n\n                if (that._touchScroller) {\n                    that._touchScroller.reset();\n                }\n\n                that._hideBusy();\n\n                that.trigger(\"dataBound\");\n            },\n\n            _mute: function(callback) {\n                this._muted = true;\n                callback.call(this);\n                this._muted = false;\n            },\n\n            _listChange: function() {\n                var isActive = this._active || this.element[0] === activeElement();\n\n                if (isActive && !this._muted) {\n                    this._selectValue(this.listView.selectedDataItems()[0]);\n                }\n            },\n\n            _selectValue: function(dataItem) {\n                var separator = this._separator();\n                var text = \"\";\n\n                if (dataItem) {\n                    text = this._text(dataItem);\n                }\n\n                if (text === null) {\n                    text = \"\";\n                }\n\n                if (separator) {\n                    text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());\n                }\n\n                this._prev = text;\n                this._accessor(text);\n                this._placeholder();\n            },\n\n            _unifySeparators: function() {\n                this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));\n                return this;\n            },\n\n            _preselect: function(value, text) {\n                this._inputValue(text);\n                this._accessor(value);\n\n                this._old = this.oldText = this._accessor();\n\n                this.listView.setValue(value);\n                this._placeholder();\n            },\n\n            _change: function() {\n                var that = this;\n                var value = that._unifySeparators().value();\n                var trigger = value !== List.unifyType(that._old, typeof value);\n\n                var valueUpdated = trigger && !that._typing;\n                var itemSelected = that._oldText !== value;\n                var clearValueTrigger = that._clearValueTrigger;\n\n                that._old = value;\n                that._oldText = value;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n\n                if ((valueUpdated || itemSelected) && !clearValueTrigger) {\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n\n                if (trigger && !clearValueTrigger) {\n                    that.trigger(CHANGE);\n                }\n\n                that.typing = false;\n                that._toggleCloseVisibility();\n            },\n\n            _accessor: function(value) {\n                var that = this,\n                    element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput[0] : that.element[0];\n\n                if (value !== undefined$1) {\n                    element.value = value === null ? \"\" : value;\n                    that._placeholder();\n                } else {\n                    value = element.value;\n\n                    if (element.className.indexOf(\"k-readonly\") > -1) {\n                        if (value === that.options.placeholder) {\n                            return \"\";\n                        } else {\n                            return value;\n                        }\n                    }\n\n                    return value;\n                }\n            },\n\n            _keydown: function(e) {\n                var that = this;\n                var key = e.keyCode;\n                var listView = that.listView;\n                var visible = that.popup.visible();\n                var current = listView.focus();\n\n                that._last = key;\n\n                if (key === keys.DOWN) {\n                    if (visible) {\n                        this._move(current ? \"focusNext\" : \"focusFirst\");\n                    } else if (that.value()) {\n                        that._filterSource({\n                            value: that.ignoreCase ? that.value().toLowerCase() : that.value(),\n                            operator: that.options.filter,\n                            field: that.options.dataTextField,\n                            ignoreCase: that.ignoreCase\n                        }).done(function() {\n                            if (that._allowOpening()) {\n                                that._resetFocusItem();\n                                that.popup.open();\n                            }\n                        });\n                    }\n                    e.preventDefault();\n                } else if (key === keys.ESC ) {\n                    if (visible) {\n                        e.preventDefault();\n                        that.close();\n                    } else {\n                        that._clearValue();\n                    }\n                } else if (e.altKey && key === keys.UP && visible) {\n                    e.preventDefault();\n                    that.close();\n                } else if (key === keys.UP) {\n                    if (visible) {\n                        this._move(current ? \"focusPrev\" : \"focusLast\");\n                    }\n                    e.preventDefault();\n                } else if (key === keys.HOME) {\n                    this._move(\"focusFirst\");\n                } else if (key === keys.END) {\n                    this._move(\"focusLast\");\n                } else if (key === keys.ENTER || key === keys.TAB) {\n\n                    if (key === keys.ENTER && visible) {\n                        e.preventDefault();\n                    }\n\n                    if (visible && current) {\n                        var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));\n                        if (that.trigger(\"select\", { dataItem: dataItem, item: current })) {\n                            return;\n                        }\n\n                        this._select(current);\n                    }\n\n                    this._blur();\n                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                    e.preventDefault();\n\n                    var direction = key === keys.PAGEDOWN ? 1 : -1;\n                    listView.scrollWith(direction * listView.screenHeight());\n                } else {\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    that.popup._hovered = true;\n                    that._search();\n                }\n            },\n\n            _keypress: function() {\n                this._oldText = this.element.val();\n                this._typing = true;\n            },\n\n            _move: function(action) {\n                this.listView[action]();\n\n                if (this.options.suggest && this.listView.focus() == null && action == \"focusNext\") {\n                    this.listView.focus(0);\n                    this.suggest(this.listView._view[0].item);\n                } else if (this.options.suggest && this.listView.focus() == null && action == \"focusPrev\") {\n                    let index = this.listView._view.length - 1;\n                    this.listView.focus(index);\n                    this.suggest(this.listView._view[index].item);\n                } else if (this.options.suggest && (action == \"focusFirst\" || action == \"focusLast\")) {\n                   caret(this.element);\n                } else if (this.options.suggest && this.listView.focus() != null) {\n                    this.suggest(this.listView.focus());\n                }\n            },\n\n            _placeholder: function(show) {\n                if (placeholderSupported) {\n                    return;\n                }\n\n                var that = this,\n                    element = that.element,\n                    placeholder = that.options.placeholder,\n                    value;\n\n                if (placeholder) {\n                    value = element.val();\n\n                    if (show === undefined$1) {\n                        show = !value;\n                    }\n\n                    if (!show) {\n                        if (value !== placeholder) {\n                            placeholder = value;\n                        } else {\n                            placeholder = \"\";\n                        }\n                    }\n\n                    if (value === that._old && !show) {\n                        return;\n                    }\n\n                    element.toggleClass(\"k-readonly\", show)\n                           .val(placeholder);\n\n                    if (!placeholder && element[0] === document.activeElement) {\n                        caret(element[0], 0, 0);\n                    }\n                }\n            },\n\n            _separator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                   return new RegExp(separator.join(\"|\"), 'gi');\n                }\n                return separator;\n            },\n\n            _defaultSeparator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                    return separator[0];\n                }\n                return separator;\n            },\n\n            _inputValue: function() {\n                return this.element.val();\n            },\n\n            _search: function() {\n                var that = this;\n                clearTimeout(that._typingTimeout);\n\n                that._typingTimeout = setTimeout(function() {\n                    if (that._prev !== that._accessor()) {\n                        that._prev = that._accessor();\n                        that.search();\n                    }\n                }, that.options.delay);\n            },\n\n            _select: function(candidate) {\n                var that = this;\n                that._active = true;\n\n                return that.listView.select(candidate).done(function() {\n                    that._active = false;\n                });\n            },\n\n            _clearButton: function() {\n                List.fn._clearButton.call(this);\n\n                if (this.options.clearButton) {\n                    this._clear.insertAfter(this.element);\n                }\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _toggleCloseVisibility: function() {\n                var preventShow = this.element.is(\":disabled\") || this.element.is(\"[readonly]\");\n\n                if (this.value() && !preventShow) {\n                    this._showClear();\n                } else {\n                    this._hideClear();\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    DOMelement = element[0],\n                    wrapper;\n\n                wrapper = element.parent();\n\n                if (!wrapper.is(\"span.k-autocomplete\")) {\n                    wrapper = element.wrap(\"<span />\").parent();\n                }\n\n                wrapper.attr(\"tabindex\", -1);\n\n                wrapper[0].style.cssText = DOMelement.style.cssText;\n                element.css({\n                    width: \"\",\n                    height: DOMelement.style.height\n                });\n\n                that._focused = that.element;\n                that.wrapper = wrapper\n                    .addClass(\"k-autocomplete k-input\")\n                    .addClass(DOMelement.className)\n                    .removeClass('input-validation-error');\n            },\n\n            _clearValue: function() {\n                this._clearValueTrigger = false;\n                List.fn._clearValue.call(this);\n                this.element.trigger(\"focus\");\n            }\n        });\n\n        ui.plugin(AutoComplete);\n\n        kendo.cssProperties.registerPrefix(\"AutoComplete\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"AutoComplete\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}